let
    Source = Excel.Workbook(File.Contents("Data File Path"), null, true),
    FirstSheet = Source{0}[Data],  // Gets first sheet automatically. But can be changed by changing the number
    #"Promoted Headers" = Table.PromoteHeaders(FirstSheet, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Station", type text}, {"Depth (m)", type any}, {"QA/QC", type any}, {"Date", type date}, {"Sample Time", type time}, {"Water Temp ( c )", type number}, {"Oxygen (# drops)", type number}, {"D.O. # Drops/2 (mg/L)", type number}, {"D.O. Meter (mg/L)", type number}, {"USE Salinity Corrected DO", type number}, {"Secchi Depth (m)", type number}, {"Total Depth (m)", type number}, {"% Secchi", Percentage.Type}, {"WEATHER", type any}, {"WIND FORCE", type any}, {"WIND DIRECTION", type text}, {"WATER CONDITION", type text}, {"Salinity (ppt)", type number}, {"Sal Bottle Temp (c)", type any}, {"Conductivity (ms/cm)", type number}, {"PO4 (uM)", type number}, {"NH4", type number}, {"NOX", type number}, {"DIN (uM)", type number}, {"DON (uM)", type number}, {"TDN", type number}, {"POC (uM)", type number}, {"PON (uM)", type number}, {"C/N Ratio", type number}, {"TON (uM)", type number}, {"TN (uM)", type number}, {"CHL-a (ug/L)", type number}, {"Phaeo (ug/L)", type number}, {"Ratio Chla/Chla + Phaeo", Percentage.Type}, {"Total Pigments (ug/L)", type number}, {"CL- (meq/L)", type number}, {"Sigma t", type number}, {"Notes", type any}, {"Volunteers", type any}}),
    
  // Only remove rows where Station is completely empty (truly blank rows)
  #"Filtered Rows" = Table.SelectRows(#"Changed Type", each [Station] <> null and [Station] <> ""),
  
  // Direct rename using the standard format that Power Query expects
  // FIXED: Changed reference from #"Removed Blank Rows" to #"Filtered Rows"
  #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows", {
      {"Station", "station"}, 
      {"Depth (m)", "depth_m"}, 
      {"QA/QC", "qa_qc"}, 
      {"Date", "date"}, 
      {"Sample Time", "sample_time"}, 
      {"Water Temp ( c )", "water_temp_c"},
      {"Oxygen (# drops)", "oxygen_#_drops"}, 
      {"D.O. # Drops/2 (mg/L)", "d.o._#_drops/2_mg/l"}, 
      {"D.O. Meter (mg/L)", "d.o._meter_mg/l"},
      {"USE Salinity Corrected DO", "use_salinity_corrected_do"}, 
      {"Secchi Depth (m)", "secchi_depth_m"}, 
      {"Total Depth (m)", "total_depth_m"},
      {"% Secchi", "%_secchi"}, 
      {"WEATHER", "weather"}, 
      {"WIND FORCE", "wind_force"}, 
      {"WIND DIRECTION", "wind_direction"}, 
      {"WATER CONDITION", "water_condition"},
      {"Salinity (ppt)", "salinity_ppt"}, 
      {"Sal Bottle Temp (c)", "salinity_bottle_temp_c"}, 
      {"Conductivity (ms/cm)", "conductivity_ms/cm"},
      {"PO4 (uM)", "po4"}, 
      {"NH4", "nh4"}, 
      {"NOX", "nox"}, 
      {"DIN (uM)", "din"}, 
      {"DON (uM)", "don"}, 
      {"TDN", "tdn"},
      {"POC (uM)", "poc"}, 
      {"PON (uM)", "pon"}, 
      {"C/N Ratio", "cn_ratio"}, 
      {"TON (uM)", "ton"}, 
      {"TN (uM)", "tn"},
      {"CHL-a (ug/L)", "chla_ug/l"}, 
      {"Phaeo (ug/L)", "phaeo_ug/l"}, 
      {"Ratio Chla/Chla + Phaeo", "ratio_chla_chla_phaeo"},
      {"Total Pigments (ug/L)", "total_pigments_ug/l"}, 
      {"CL- (meq/L)", "cl-_meq/l"}, 
      {"Sigma t", "sigma_t"}, 
      {"Notes", "notes"}, 
      {"Volunteers", "volunteers"}
  }),
  
  // Helper function to check if value is a special code
  IsSpecialCode = (value) => 
      let
          textValue = try Text.Upper(Text.From(value)) otherwise "",
          specialCodes = {"ND", "BDL", "NA", "N/A", "NES", "NS", "NC", "NR", "NP", "NT", "NM"}
      in
          List.Contains(specialCodes, textValue),

  // Helper function to get clean text version of special codes
  GetCleanSpecialCode = (value) => 
      let
          textValue = try Text.Upper(Text.From(value)) otherwise ""
      in
          if textValue = "N/A" then "NA"
          else textValue,

  // Helper function to safely convert to number while preserving special codes
  SafeToNumber = (value) =>
      if value = null then null
      else if IsSpecialCode(value) then GetCleanSpecialCode(value)
      else 
          let
              numResult = try Number.From(value) otherwise null
          in
              numResult,

  // Helper function to clean and preserve numeric values without losing precision
  CleanNumericValue = (value) =>
      if value = null then null
      else if IsSpecialCode(value) then GetCleanSpecialCode(value)
      else 
          let
              numResult = try Number.From(value) otherwise null
          in
              if numResult = null then GetCleanSpecialCode(value)
              else numResult,

  // Clean station column
  cleaned_station_col = Table.AddColumn(#"Renamed Columns", "cleaned_station", each 
      let
          originalValue = [station]
      in
          if originalValue = null then null
          else if IsSpecialCode(originalValue) then GetCleanSpecialCode(originalValue)
          else 
              let
                  step1 = Text.Trim(Text.From(originalValue)),
                  step2 = Text.Upper(step1),
                  step3 = if Text.Contains(step2, "HEAD") then
                              let
                                  withoutSpaces = Text.Replace(step2, " ", ""),
                                  headPosition = Text.PositionOf(withoutSpaces, "HEAD")
                              in
                                  if headPosition > 0 then
                                      Text.Range(withoutSpaces, 0, headPosition) & " HEAD"
                                  else step2
                          else Text.Replace(step2, " ", "")
              in step3),

  // Clean depth column
  cleaned_depth_col = Table.AddColumn(cleaned_station_col, "cleaned_depth_m", each 
      let
          originalValue = [depth_m]
      in
          if originalValue = null then null
          else if IsSpecialCode(originalValue) then GetCleanSpecialCode(originalValue)
          else 
              let
                  numResult = try Number.From(originalValue) otherwise null
              in
                  if numResult = null then 
                      // Try to clean text version
                      let
                          cleanText = Text.Replace(Text.Replace(Text.From(originalValue), "m", ""), " ", ""),
                          cleanNum = try Number.From(cleanText) otherwise null
                      in
                          if cleanNum = null then Text.From(originalValue)
                          else if cleanNum = 0 then "S"
                          else cleanNum
                  else if numResult = 0 then "S"
                  else numResult),

  // Clean water temperature column
  cleaned_water_temp_c_col = Table.AddColumn(cleaned_depth_col, "cleaned_water_temp_c", each 
      CleanNumericValue([water_temp_c])),

  // Clean oxygen drops column
  cleaned_oxygen_drop_col = Table.AddColumn(cleaned_water_temp_c_col, "cleaned_oxygen_drops", each 
      CleanNumericValue([#"oxygen_#_drops"])),

  // Clean D.O. drops/2 column with calculation
  #"cleaned_d.o._drops/2_col" = Table.AddColumn(cleaned_oxygen_drop_col, "cleaned_d.o._#_drops/2_mg/l", each 
      let
          oxygenValue = [cleaned_oxygen_drops]
      in
          if oxygenValue = null then null
          else if IsSpecialCode(Text.From(oxygenValue)) then Text.From(oxygenValue)
          else 
              let
                  numResult = try Number.From(oxygenValue) otherwise null
              in
                  if numResult = null then Text.From(oxygenValue)
                  else numResult / 2),

  // Clean D.O. meter column
  #"cleaned_d.o._meter_mg/l_col" = Table.AddColumn(#"cleaned_d.o._drops/2_col", "cleaned_d.o._meter_mg/l", each 
      CleanNumericValue([#"d.o._meter_mg/l"])),

  // Clean salinity corrected DO column
  cleaned_use_salininty_corrected_do_col = Table.AddColumn(#"cleaned_d.o._meter_mg/l_col", "cleaned_use_salinity_corrected_do", each 
      CleanNumericValue([use_salinity_corrected_do])),

  // Clean secchi depth column
  cleaned_secchi_depth_m_col = Table.AddColumn(cleaned_use_salininty_corrected_do_col, "cleaned_secchi_depth_m", each 
      let
          originalValue = [secchi_depth_m]
      in
          if originalValue = null then null
          else if IsSpecialCode(originalValue) then GetCleanSpecialCode(originalValue)
          else 
              let
                  numResult = try Number.From(originalValue) otherwise null
              in
                  if numResult = null then Text.From(originalValue)
                  else if numResult = 0 then "S"
                  else numResult),

  // Clean total depth column
  cleaned_total_depth_m_col = Table.AddColumn(cleaned_secchi_depth_m_col, "cleaned_total_depth_m", each 
      CleanNumericValue([total_depth_m])),

  // Calculate % secchi with proper error handling
  #"cleaned_%_secch_col" = Table.AddColumn(cleaned_total_depth_m_col, "cleaned_%_secchi", each 
      let
          secchiValue = [cleaned_secchi_depth_m],
          totalValue = [cleaned_total_depth_m]
      in
          if secchiValue = null or totalValue = null then null
          else if IsSpecialCode(Text.From(secchiValue)) or IsSpecialCode(Text.From(totalValue)) then "ND"
          else 
              let
                  secchiNum = try Number.From(secchiValue) otherwise null,
                  totalNum = try Number.From(totalValue) otherwise null
              in
                  if secchiNum = null or totalNum = null or totalNum = 0 then "ND"
                  else 
                      let
                          percentage = (secchiNum / totalNum) * 100
                      in
                          percentage), // Keep as number, don't add % symbol or cap at 100

  // Clean salinity column
  cleaned_salinity_ppt_col = Table.AddColumn(#"cleaned_%_secch_col", "cleaned_salinity_ppt", each 
      CleanNumericValue([salinity_ppt])),

  // Clean conductivity column
  #"cleaned_conductivity_ms/cm_col" = Table.AddColumn(cleaned_salinity_ppt_col, "cleaned_conductivity_ms/cm", each 
      CleanNumericValue([#"conductivity_ms/cm"])),

  // Clean PO4 column
  cleaned_po4_col = Table.AddColumn(#"cleaned_conductivity_ms/cm_col", "cleaned_po4", each 
      CleanNumericValue([po4])),

  // Clean NH4 column
  cleaned_nh4_col = Table.AddColumn(cleaned_po4_col, "cleaned_nh4", each 
      CleanNumericValue([nh4])),

  // Clean NOX column
  cleaned_nox_col = Table.AddColumn(cleaned_nh4_col, "cleaned_nox", each 
      CleanNumericValue([nox])),

  // Calculate DIN with proper error handling
  cleaned_din_col = Table.AddColumn(cleaned_nox_col, "cleaned_din", each 
      let
          nh4Value = [cleaned_nh4],
          noxValue = [cleaned_nox]
      in
          if nh4Value = null or noxValue = null then null
          else if IsSpecialCode(Text.From(nh4Value)) or IsSpecialCode(Text.From(noxValue)) then "ND"
          else 
              let
                  nh4Num = try Number.From(nh4Value) otherwise null,
                  noxNum = try Number.From(noxValue) otherwise null
              in
                  if nh4Num = null or noxNum = null then "ND"
                  else nh4Num + noxNum),

  // Clean TDN column
  cleaned_tdn_col = Table.AddColumn(cleaned_din_col, "cleaned_tdn", each 
      CleanNumericValue([tdn])),

  // Calculate DON with proper error handling
  cleaned_don_col = Table.AddColumn(cleaned_tdn_col, "cleaned_don", each 
      let
          tdnValue = [cleaned_tdn],
          dinValue = [cleaned_din]
      in
          if tdnValue = null or dinValue = null then null
          else if IsSpecialCode(Text.From(tdnValue)) or IsSpecialCode(Text.From(dinValue)) then "ND"
          else 
              let
                  tdnNum = try Number.From(tdnValue) otherwise null,
                  dinNum = try Number.From(dinValue) otherwise null
              in
                  if tdnNum = null or dinNum = null then "ND"
                  else tdnNum - dinNum),

  // Clean POC column
  cleaned_poc_col = Table.AddColumn(cleaned_don_col, "cleaned_poc", each 
      CleanNumericValue([poc])),

  // Clean PON column
  cleaned_pon_col = Table.AddColumn(cleaned_poc_col, "cleaned_pon", each 
      CleanNumericValue([pon])),

  // Calculate C/N ratio with comprehensive error handling
  cleaned_cn_ratio_col = Table.AddColumn(cleaned_pon_col, "cleaned_cn_ratio", each 
      let
          pocValue = [cleaned_poc],
          ponValue = [cleaned_pon]
      in
          if pocValue = null or ponValue = null then null
          else if IsSpecialCode(Text.From(pocValue)) or IsSpecialCode(Text.From(ponValue)) then "ND"
          else 
              let
                  pocNum = try Number.From(pocValue) otherwise null,
                  ponNum = try Number.From(ponValue) otherwise null
              in
                  if pocNum = null or ponNum = null then "ND"
                  else if ponNum = 0 or Number.Abs(ponNum) < 0.000001 then "ND" // Handle division by zero/very small numbers
                  else pocNum / ponNum),

  // Calculate TON with proper error handling
  cleaned_ton_col = Table.AddColumn(cleaned_cn_ratio_col, "cleaned_ton", each 
      let
          ponValue = [cleaned_pon],
          donValue = [cleaned_don]
      in
          if ponValue = null or donValue = null then null
          else if IsSpecialCode(Text.From(ponValue)) or IsSpecialCode(Text.From(donValue)) then "ND"
          else 
              let
                  ponNum = try Number.From(ponValue) otherwise null,
                  donNum = try Number.From(donValue) otherwise null
              in
                  if ponNum = null or donNum = null then "ND"
                  else ponNum + donNum),

  // Calculate TN with proper error handling
  cleaned_tn_col = Table.AddColumn(cleaned_ton_col, "cleaned_tn", each 
      let
          nh4Value = [cleaned_nh4],
          noxValue = [cleaned_nox],
          donValue = [cleaned_don],
          ponValue = [cleaned_pon]
      in
          if nh4Value = null or noxValue = null or donValue = null or ponValue = null then null
          else if IsSpecialCode(Text.From(nh4Value)) or IsSpecialCode(Text.From(noxValue)) or 
                  IsSpecialCode(Text.From(donValue)) or IsSpecialCode(Text.From(ponValue)) then "ND"
          else 
              let
                  nh4Num = try Number.From(nh4Value) otherwise null,
                  noxNum = try Number.From(noxValue) otherwise null,
                  donNum = try Number.From(donValue) otherwise null,
                  ponNum = try Number.From(ponValue) otherwise null
              in
                  if nh4Num = null or noxNum = null or donNum = null or ponNum = null then "ND"
                  else nh4Num + noxNum + donNum + ponNum),

  // Clean Chl-a column
  cleaned_chla_ug_l_col = Table.AddColumn(cleaned_tn_col, "cleaned_chla_ug_l", each 
      CleanNumericValue([#"chla_ug/l"])),

  // Clean Phaeo column
  cleaned_phaeo_ug_l_col = Table.AddColumn(cleaned_chla_ug_l_col, "cleaned_phaeo_ug_l", each 
      CleanNumericValue([#"phaeo_ug/l"])),

  // Calculate ratio Chla/(Chla + Phaeo) with proper error handling
  cleaned_ratio_chla_chla_phaeo_col = Table.AddColumn(cleaned_phaeo_ug_l_col, "cleaned_ratio_chla_chla_phaeo", each 
      let
          chlaValue = [cleaned_chla_ug_l],
          phaeoValue = [cleaned_phaeo_ug_l]
      in
          if chlaValue = null or phaeoValue = null then null
          else if IsSpecialCode(Text.From(chlaValue)) or IsSpecialCode(Text.From(phaeoValue)) then "ND"
          else 
              let
                  chlaNum = try Number.From(chlaValue) otherwise null,
                  phaeoNum = try Number.From(phaeoValue) otherwise null,
                  totalPigments = if chlaNum = null or phaeoNum = null then null else chlaNum + phaeoNum
              in
                  if chlaNum = null or phaeoNum = null then "ND"
                  else if totalPigments = 0 or Number.Abs(totalPigments) < 0.000001 then "ND"
                  else (chlaNum / totalPigments) * 100), // Keep as number, don't add % symbol

  // Calculate total pigments with proper error handling
  cleaned_total_pigment_col = Table.AddColumn(cleaned_ratio_chla_chla_phaeo_col, "cleaned_total_pigments_ug_l", each 
      let
          chlaValue = [cleaned_chla_ug_l],
          phaeoValue = [cleaned_phaeo_ug_l]
      in
          if chlaValue = null or phaeoValue = null then null
          else if IsSpecialCode(Text.From(chlaValue)) or IsSpecialCode(Text.From(phaeoValue)) then "ND"
          else 
              let
                  chlaNum = try Number.From(chlaValue) otherwise null,
                  phaeoNum = try Number.From(phaeoValue) otherwise null
              in
                  if chlaNum = null or phaeoNum = null then "ND"
                  else chlaNum + phaeoNum),

  // Clean Cl- column
  cleaned_cl_col = Table.AddColumn(cleaned_total_pigment_col, "cleaned_cl", each 
      CleanNumericValue([#"cl-_meq/l"])),

  // Clean Sigma t column
  cleaned_sigma_t_col = Table.AddColumn(cleaned_cl_col, "cleaned_sigma_t", each 
      CleanNumericValue([sigma_t])),

  // Reorder columns to put cleaned columns first
  #"Reordered Columns" = Table.ReorderColumns(cleaned_sigma_t_col,{"cleaned_station", "station", "cleaned_depth_m", "depth_m", "qa_qc", "date", "sample_time", "cleaned_water_temp_c", "cleaned_oxygen_drops", "cleaned_d.o._#_drops/2_mg/l", "cleaned_d.o._meter_mg/l", "cleaned_use_salinity_corrected_do", "cleaned_secchi_depth_m", "cleaned_total_depth_m", "cleaned_%_secchi", "water_temp_c", "oxygen_#_drops", "d.o._#_drops/2_mg/l", "d.o._meter_mg/l", "use_salinity_corrected_do", "secchi_depth_m", "total_depth_m", "%_secchi", "weather", "wind_force", "wind_direction", "water_condition", "cleaned_salinity_ppt", "salinity_bottle_temp_c", "cleaned_conductivity_ms/cm", "salinity_ppt", "conductivity_ms/cm", "cleaned_po4", "cleaned_nh4", "cleaned_nox", "cleaned_din", "cleaned_don", "cleaned_tdn", "cleaned_poc", "cleaned_pon", "cleaned_cn_ratio", "cleaned_ton", "cleaned_tn", "cleaned_chla_ug_l", "cleaned_phaeo_ug_l", "cleaned_ratio_chla_chla_phaeo", "cleaned_total_pigments_ug_l", "cleaned_cl", "cleaned_sigma_t", "notes", "volunteers", "po4", "nh4", "nox", "din", "don", "tdn", "poc", "pon", "cn_ratio", "ton", "tn", "chla_ug/l", "phaeo_ug/l", "ratio_chla_chla_phaeo", "total_pigments_ug/l", "cl-_meq/l", "sigma_t"}),

  // Remove original columns, keeping only cleaned versions
  #"Removed Columns" = Table.RemoveColumns(#"Reordered Columns",{"din", "don", "tdn", "poc", "pon", "cn_ratio", "ton", "tn", "chla_ug/l", "phaeo_ug/l", "ratio_chla_chla_phaeo", "total_pigments_ug/l", "cl-_meq/l", "sigma_t", "po4", "nh4", "nox", "salinity_ppt", "conductivity_ms/cm", "water_temp_c", "oxygen_#_drops", "d.o._#_drops/2_mg/l", "d.o._meter_mg/l", "use_salinity_corrected_do", "secchi_depth_m", "total_depth_m", "%_secchi", "station", "depth_m"})
in
  #"Removed Columns"
